// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  emailVerified DateTime? @map("email_verified")
  image         String?
  files         File[]
  folders       Folder[]
  accounts      Account[]
  settings      Setting?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model File {
  id        String    @id @default(cuid())
  name      String
  path      String
  size      Int
  mimeType  String
  etag      String
  versionId String?
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  folderId  String?
  folder    Folder?   @relation(fields: [folderId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Folder {
  id         String    @id @default(cuid())
  name       String
  userId     String
  user       User      @relation(fields: [userId], references: [id])
  files      File[]
  parentId   String?
  parent     Folder?   @relation("Subfolder", fields: [parentId], references: [id], onDelete: Cascade)
  subfolders Folder[]  @relation("Subfolder")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
}

model Setting {
  id         String  @id @default(cuid())
  theme      String?
  fontSize   Int?
  fontFamily String?
  userId     String  @unique
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
